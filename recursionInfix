    (define <InfixLast>
        (new 
            (*parser <Number>)
            (*parser <InfixSymbol>) ;returns the wrong output not sure why
            (*disj 2)
            done))             
        
(define <InfixPow>
    (new 
        (*parser <InfixLast>)
        (*parser <PowerSymbol>)
        (*parser <InfixLast>)
        (*caten 2) 
        (*pack-with (lambda (exp1 exp2)
            `(,@exp2))) *star
        (*caten 2) 
        (*pack-with (lambda (exp1 exp2)
                `('expt ,exp1 ,@exp2)))
        done))
        
(test-string <InfixPow> "3^2^5")

(define <InfixDiv>
    (new 
        (*parser <InfixPow>)
        (*parser (char (integer->char 47)))
        (*parser <InfixPow>)
        (*caten 2) *star
        ;(*pack-with (lambda (exp1 exp2)
        ;    `(/ ,@exp2)))
        (*caten 2) 
        (*pack-with (lambda (exp1 exp2)
                `(,@exp2 ,@exp1)))
        done))

(test-string <InfixDiv> "4/3^2")
        
(define <InfixMul>
    (new 
        (*parser <InfixDiv>)
        (*parser (char (integer->char 42)))
        (*parser <InfixDiv>)
        (*caten 2) *star
        ;(*pack-with (lambda (exp1 exp2)
        ;   `(* ,@exp2)))        
        (*caten 2) 
        (*pack-with (lambda (exp1 exp2)
                `(,@exp2 ,@exp1)))
        done))
        
        
(define <InfixSub>
    (new 
        (*parser <InfixMul>)
        (*parser (char (integer->char 45)))
        (*parser <InfixMul>)
        (*caten 2) *star
        (*caten 2) 
        (*pack-with (lambda (exp1 exp2)
                `(,@exp2 ,@exp1)))
        done))

(define <Add>
    (new
        (*parser <InfixSub>)
        (*parser (char (integer->char 43)))
        (*parser <InfixSub>)
        (*caten 3)
        (*pack-with
            (lambda (num1 plus num2)
                `(+ ,num1 ,num2)))
        done))

(define <InfixAdd>
    (new 
        ;(*parser <Add>)
        (*parser <InfixSub>)
        ;(*disj 2)
        (*parser (char (integer->char 43)))
        (*parser <InfixSub>)
        (*caten 2)
        (*pack-with (lambda (exp1 exp2)
            `(,@exp2))) 
        *star
        (*caten 2) 
        (*pack-with (lambda (exp1 exp2)
                `(+ ,exp1 ,@exp2)))
        done))
(test-string <InfixAdd> "2+3+4+5")