PRINT_R0:
	PUSH(FP);
	MOV(FP, SP);
	CMP(R0, T_VOID);
	JUMP_EQ(PRINT_R0_END);
  CMP(R0, SOB_VOID);
  JUMP_EQ(PRINT_R0_END);
	PUSH(R0);
	CALL(WRITE_SOB_HELPER);
	DROP(IMM(1));
	PUSH('\n');
	CALL(PUTCHAR);
	DROP(IMM(1)); 
PRINT_R0_END:
	JUMP(END);
END:
	POP(FP);
	RETURN;


 WRITE_SOB_HELPER:
  MOV(R0, STARG(0));
  MOV(R0, IND(R0));
  CMP(R0, IMM(T_VOID));
  JUMP_EQ(WRITE_SOB_VOID);
  CMP(R0, IMM(T_NIL));
  JUMP_EQ(WRITE_SOB_NIL); 
  CMP(R0, IMM(T_BOOL));
  JUMP_EQ(WRITE_SOB_BOOL); 
  CMP(R0, IMM(T_CHAR));
  JUMP_EQ(WRITE_SOB_CHAR); 
  CMP(R0, IMM(T_INTEGER));
  JUMP_EQ(WRITE_SOB_INTEGER);
  CMP(R0, IMM(T_FRAC));
  JUMP_EQ(WRITE_SOB_FRAC);
  CMP(R0, IMM(T_STRING));
  JUMP_EQ(WRITE_SOB_STRING);
  CMP(R0, IMM(T_SYMBOL));
  JUMP_EQ(WRITE_SOB_SYMBOL_HELPER);
  CMP(R0, IMM(T_PAIR));
  JUMP_EQ(WRITE_SOB_PAIR);
  CMP(R0, IMM(T_VECTOR));
  JUMP_EQ(WRITE_SOB_VECTOR);
  CMP(R0, IMM(T_CLOSURE));
  JUMP_EQ(WRITE_SOB_CLOSURE);
  PUSH(R0);
  PUSH(IMM('\n'));
  CALL(PUTCHAR);
  PUSH(IMM('F'));
  CALL(PUTCHAR);
  PUSH(IMM('a'));
  CALL(PUTCHAR);
  PUSH(IMM('t'));
  CALL(PUTCHAR);
  PUSH(IMM('a'));
  CALL(PUTCHAR);
  PUSH(IMM('l'));
  CALL(PUTCHAR);
  PUSH(IMM(' '));
  CALL(PUTCHAR);
  PUSH(IMM('e'));
  CALL(PUTCHAR);
  PUSH(IMM('r'));
  CALL(PUTCHAR);
  PUSH(IMM('r'));
  CALL(PUTCHAR);
  PUSH(IMM('o'));
  CALL(PUTCHAR);
  PUSH(IMM('r'));
  CALL(PUTCHAR);
  PUSH(IMM(':'));
  CALL(PUTCHAR);
  PUSH(IMM(' '));
  CALL(PUTCHAR);
  PUSH(IMM('C'));
  CALL(PUTCHAR);
  PUSH(IMM('o'));
  CALL(PUTCHAR);
  PUSH(IMM('r'));
  CALL(PUTCHAR);
  PUSH(IMM('r'));
  CALL(PUTCHAR);
  PUSH(IMM('u'));
  CALL(PUTCHAR);
  PUSH(IMM('p'));
  CALL(PUTCHAR);
  PUSH(IMM('t'));
  CALL(PUTCHAR);
  PUSH(IMM(' '));
  CALL(PUTCHAR);
  PUSH(IMM('s'));
  CALL(PUTCHAR);
  PUSH(IMM('e'));
  CALL(PUTCHAR);
  PUSH(IMM('x'));
  CALL(PUTCHAR);
  PUSH(IMM('p'));
  CALL(PUTCHAR);
  PUSH(IMM('r'));
  CALL(PUTCHAR);
  PUSH(IMM(' '));
  CALL(PUTCHAR);
  PUSH(IMM('t'));
  CALL(PUTCHAR);
  PUSH(IMM('y'));
  CALL(PUTCHAR);
  PUSH(IMM('p'));
  CALL(PUTCHAR);
  PUSH(IMM('e'));
  CALL(PUTCHAR);
  PUSH(IMM(':'));
  CALL(PUTCHAR);
  PUSH(IMM(' '));
  CALL(PUTCHAR);
  DROP(34);
  CALL(WRITE_INTEGER);
  DROP(1);
  CALL(NEWLINE);
  HALT;

 WRITE_SOB_SYMBOL_HELPER:
  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  PUSH(R2);
  PUSH(R3);
  MOV(R0, FPARG(0));
  MOV(R1, INDD(R0, 1));
  INCR(R1);
  MOV(R1, IMM(IND(R1)));
  MOV(R2, INDD(R0, 1));
  ADD(R2, IMM(2));
 L_SYMB_LOOP:
  CMP(R1, IMM(0));
  JUMP_EQ(L_SYMB_EXIT);
  CMP(IND(R2), '\n');
  JUMP_EQ(L_SYMB_NEWLINE);
  CMP(IND(R2), '\t');
  JUMP_EQ(L_SYMB_TAB);
  CMP(IND(R2), '\f');
  JUMP_EQ(L_SYMB_PAGE);
  CMP(IND(R2), '\r');
  JUMP_EQ(L_SYMB_RETURN);
  CMP(IND(R2), '\\');
  JUMP_EQ(L_SYMB_BACKSLASH);
  CMP(IND(R2), '\"');
  JUMP_EQ(L_SYMB_DQUOTE);
  CMP(IND(R2), ' ');
  JUMP_LT(L_SYMB_OCT_CHAR);
  PUSH(IND(R2));
  CALL(PUTCHAR);
  DROP(1);
  JUMP(L_SYMB_LOOP_CONT);
 L_SYMB_DQUOTE:
  PUSH(IMM('\\'));
  CALL(PUTCHAR);
  PUSH(IMM('\"'));
  CALL(PUTCHAR);
  DROP(2);
  JUMP(L_SYMB_LOOP_CONT);
 L_SYMB_BACKSLASH:
  PUSH(IMM('\\'));
  CALL(PUTCHAR);
  PUSH(IMM('\\'));
  CALL(PUTCHAR);
  DROP(2);
  JUMP(L_SYMB_LOOP_CONT);
 L_SYMB_RETURN:
  PUSH(IMM('\\'));
  CALL(PUTCHAR);
  PUSH(IMM('r'));
  CALL(PUTCHAR);
  DROP(2);
  JUMP(L_SYMB_LOOP_CONT);
 L_SYMB_PAGE:
  PUSH(IMM('\\'));
  CALL(PUTCHAR);
  PUSH(IMM('f'));
  CALL(PUTCHAR);
  DROP(2);
  JUMP(L_SYMB_LOOP_CONT);
 L_SYMB_TAB:
  PUSH(IMM('\\'));
  CALL(PUTCHAR);
  PUSH(IMM('t'));
  CALL(PUTCHAR);
  DROP(2);
  JUMP(L_SYMB_LOOP_CONT);  
 L_SYMB_NEWLINE:
  PUSH(IMM('\\'));
  CALL(PUTCHAR);
  PUSH(IMM('n'));
  CALL(PUTCHAR);
  DROP(2);
  JUMP(L_SYMB_LOOP_CONT);
 L_SYMB_OCT_CHAR:
  MOV(R0, IND(R2));
  MOV(R3, R0);
  REM(R3, IMM(8));
  PUSH(R3);
  DIV(R0, IMM(8));
  MOV(R3, R0);
  REM(R3, IMM(8));
  PUSH(R3);
  DIV(R0, IMM(8));
  REM(R0, IMM(8));
  PUSH(R0);
  PUSH(IMM('\\'));
  CALL(PUTCHAR);
  DROP(1);
  CALL(WRITE_INTEGER);
  DROP(1);
  CALL(WRITE_INTEGER);
  DROP(1);
  CALL(WRITE_INTEGER);
  DROP(1);
 L_SYMB_LOOP_CONT:
  INCR(R2);
  DECR(R1);
  JUMP(L_SYMB_LOOP);
 L_SYMB_EXIT:
  POP(R3);
  POP(R2);
  POP(R1);
  POP(FP);
  RETURN;

 ///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
////////////////////////////  APPLY  ///////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////


  APPLY:
  PUSH(FP);
  MOV(FP,SP);

  MOV(R0, IMM(0)); // WILL HOLD THE NUM OF ARGS
  MOV(R12, FPARG(2)); //FUNC
  MOV(R13, FPARG(3)); //LIST OF ARGS
  MOV(R14, FPARG(-1)); //RET
  MOV(R8, IMM(0)); //CONTER 
  MOV(R9, IMM(1)); //CONTER 

 
  PUSH(R13);
  CALL(LIST_LEN);
  DROP(1);
  MOV(R8, R0);
 //R8 NOW HOLS THE NUM OF ARGS

  CHANGING_STACK:
  POP(FP);
  SUB(SP, IMM(5)); //ALL THE APPLY STUFF
  ADD(SP, IMM(3)); //NEW FUNC STUFF
  ADD(SP, R8); //NUM OF ARGS
  PUSH(FP);
  MOV(FP,SP);
  MOV(FPARG(-1), R14); //OLD RET
  MOV(FPARG(0), INDD(R12, 1)); // FUNC ENV
  MOV(FPARG(1), R8); //NUM OF ARGS

  MOV(R8, IMM(2));
  PUSHING_ARGS:
  CMP(INDD(R13, 0), T_NIL);
  JUMP_EQ(CONT);
  MOV(FPARG(R8), INDD(R13, 1)); 
  MOV(R13, INDD(R13, 2));   
  INCR(R8);
  JUMP(PUSHING_ARGS);

  CONT:
  POP(FP);
  JUMPA(INDD(R12, 2));  


GIVE_ME_ARG_IN_LST:
  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  PUSH(R2);
  PUSH(R3);
  MOV(R1, FPARG(0)); //NUM
  MOV(R2, FPARG(1)); // LIST
  MOV(R3, IMM(0)); //COUNTER

GIVE_ME_ARG_IN_LST_LOOP:
  CMP(R3, R1);
  JUMP_EQ(GIVE_ME_ARG_IN_LST_END);
  MOV(R2, INDD(R2, 2));
  ADD(R3, IMM(1));
  JUMP(GIVE_ME_ARG_IN_LST_LOOP);

GIVE_ME_ARG_IN_LST_END:
  MOV(R0, INDD(R2, 1));
  POP(R3);
  POP(R2);
  POP(R1);
  POP(FP);     
  RETURN;

///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
////////////////////////////  STRINGS  ///////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////

 STRING_LENGTH:
 PUSH(FP);
 MOV(FP,SP);
 PUSH(R1);
 CMP(FPARG(1),IMM(1));
 JUMP_NE(Lerror_incorr_num_of_args);
 //R1 holds the string
 MOV(R1, FPARG(2)); 
 CMP(INDD(R1, 0),IMM(T_STRING));  
 JUMP_NE(Lerror_incorr_type);
 MOV(R1,FPARG(2));
 MOV(R1, INDD(R1,1));
 PUSH(R1);
 CALL(MAKE_SOB_INTEGER);
 DROP(1);
 POP(R1);   
 POP(FP);     
 RETURN; 


 STRING_REF:
 PUSH(FP);
 MOV(FP,SP);
 PUSH(R1);
 CMP(FPARG(1),IMM(2));
 JUMP_NE(Lerror_incorr_num_of_args);
 //R1 holds the vector
 MOV(R1, FPARG(2)); 
 CMP(INDD(R1, 0),IMM(T_STRING));  
 JUMP_NE(Lerror_incorr_type);
 CMP(INDD(R1, 1),IMM(INDD(FPARG(3),1)));  
 JUMP_LT(Lerror_incorr_type); 
 MOV(R1,FPARG(2));
 ADD(R1,IMM(2));
 ADD(R1, IMM(INDD(FPARG(3),1)));
 MOV(R0, IND(R1));
 PUSH(R0);
 CALL(MAKE_SOB_CHAR);
 DROP(1);
 POP(R1);   
 POP(FP);     
 RETURN; 

STRING_SET:
 PUSH(FP);
 MOV(FP,SP);
 PUSH(R1);
 CMP(FPARG(1),IMM(3));
 JUMP_NE(Lerror_incorr_num_of_args);
 //R1 holds the vector
 MOV(R1, FPARG(2)); 
 CMP(INDD(R1, 0),IMM(T_STRING));  
 JUMP_NE(Lerror_incorr_type);
 CMP(INDD(R1, 1),IMM(INDD(FPARG(3),1)));  
 JUMP_LT(Lerror_incorr_type); 
 CMP(IND(FPARG(4)),T_CHAR);  
 JUMP_LT(Lerror_incorr_type); 
 MOV(R1,FPARG(2));
 ADD(R1,IMM(2));
 ADD(R1, IMM(INDD(FPARG(3),1)));
 MOV(IND(R1),INDD(FPARG(4),1));
 MOV(R0, T_VOID);
 POP(R1);   
 POP(FP);     
 RETURN; 


 MAKE_STRING:
 PUSH(FP);
 MOV(FP,SP);
 PUSH(R1);
 PUSH(R2);
 CMP(FPARG(1),IMM(1));
 JUMP_EQ(MAKE_STRING_ZERO);
 CMP(FPARG(1),IMM(2));
 JUMP_EQ(MAKE_STRING_VARS);
 JUMP(Lerror_incorr_num_of_args);

MAKE_STRING_ZERO:
 //R1 holds the num
 MOV(R1, FPARG(2)); 
 CMP(INDD(R1, 0),IMM(T_INTEGER)); 
 JUMP_NE(Lerror_incorr_type);
 CMP(INDD(R1, 1),IMM(0));  
 JUMP_NE(MAKE_STRING_ZERO_TIMES);
 MOV(R2,IMM(0));
 JUMP_EQ(MAKE_STRING_END);

MAKE_STRING_ZERO_TIMES:
 MOV(R1,INDD(R1, 1));
 MOV(R2,IMM(0));
MAKE_STRING_ZERO_TIMES_LOOP:
   CMP(R2,R1);
  JUMP_EQ(MAKE_STRING_END);
  PUSH(IMM(0));
  INCR(R2);
  JUMP(MAKE_STRING_ZERO_TIMES_LOOP);

MAKE_STRING_VARS:
 //R1 holds the num
 MOV(R1, FPARG(2)); 
 CMP(INDD(R1, 0),IMM(T_INTEGER));  
 JUMP_NE(Lerror_incorr_type); 
 CMP(INDD(R1, 1),IMM(0));  
 JUMP_EQ(MAKE_STRING_ZERO);
 CMP(IND(FPARG(3)),T_CHAR);  
 JUMP_NE(Lerror_incorr_type);

 MOV(R1,INDD(R1, 1));
 MOV(R2,IMM(0));
MAKE_STRING_VARS_LOOP:
  CMP(R2,R1);
  JUMP_EQ(MAKE_STRING_END);
  PUSH(INDD(FPARG(3),1));
  INCR(R2);
  JUMP(MAKE_STRING_VARS_LOOP);

MAKE_STRING_END:
  PUSH(R2);
  CALL(MAKE_SOB_STRING);
  DROP(1);  
  DROP(R2);
 POP(R2); 
 POP(R1); 
 POP(FP);     
 RETURN; 

///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
////////////////////////////  VECTORS  ///////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////

VECTOR_SET:
 PUSH(FP);
 MOV(FP,SP);
 PUSH(R1);
 CMP(FPARG(1),IMM(3));
 JUMP_NE(Lerror_incorr_num_of_args);
 //R1 holds the vector
 MOV(R1, FPARG(2)); 
 CMP(INDD(R1, 0),IMM(T_VECTOR));  
 JUMP_NE(Lerror_incorr_type);
 CMP(INDD(R1, 1),IMM(INDD(FPARG(3),1)));  
 JUMP_LT(Lerror_incorr_type); 
 MOV(R1,FPARG(2));
 ADD(R1,IMM(2));
 ADD(R1, IMM(INDD(FPARG(3),1)));
 MOV(IND(R1),FPARG(4));
 MOV(R0, T_VOID);
 POP(R1);   
 POP(FP);     
 RETURN; 

 VECTOR_REF:
 PUSH(FP);
 MOV(FP,SP);
 PUSH(R1);
 CMP(FPARG(1),IMM(2));
 JUMP_NE(Lerror_incorr_num_of_args);
 //R1 holds the vector
 MOV(R1, FPARG(2)); 
 CMP(INDD(R1, 0),IMM(T_VECTOR));  
 JUMP_NE(Lerror_incorr_type);
 CMP(INDD(R1, 1),IMM(INDD(FPARG(3),1)));  
 JUMP_LT(Lerror_incorr_type); 
 MOV(R1,FPARG(2));
 ADD(R1,IMM(2));
 ADD(R1, IMM(INDD(FPARG(3),1)));
 MOV(R0, IND(R1));
 POP(R1);   
 POP(FP);     
 RETURN; 


 VECTOR_LENGTH:
 PUSH(FP);
 MOV(FP,SP);
 PUSH(R1);
 CMP(FPARG(1),IMM(1));
 JUMP_NE(Lerror_incorr_num_of_args);
 //R1 holds the vector
 MOV(R1, FPARG(2)); 
 CMP(INDD(R1, 0),IMM(T_VECTOR));  
 JUMP_NE(Lerror_incorr_type);
 MOV(R1,FPARG(2));
 MOV(R1, INDD(R1,1));
 PUSH(R1);
 CALL(MAKE_SOB_INTEGER);
 DROP(1);
 POP(R1);   
 POP(FP);     
 RETURN; 


 MAKE_VECTOR:
 PUSH(FP);
 MOV(FP,SP);
 PUSH(R1);
 PUSH(R2);
 CMP(FPARG(1),IMM(1));
 JUMP_EQ(MAKE_VECTOR_ZERO);
 CMP(FPARG(1),IMM(2));
 JUMP_EQ(MAKE_VECTOR_VARS);
 JUMP(Lerror_incorr_num_of_args);

MAKE_VECTOR_ZERO:
 //R1 holds the num
 MOV(R1, FPARG(2)); 
 CMP(INDD(R1, 0),IMM(T_INTEGER));  
 JUMP_NE(Lerror_incorr_type);
 MOV(R1,INDD(R1, 1));
 MOV(R2,IMM(0));
MAKE_VECTOR_ZERO_LOOP:
  CMP(R2,R1);
  JUMP_EQ(MAKE_VECTOR_END);
  PUSH(IMM(0));
  CALL(MAKE_SOB_INTEGER);
  DROP(1);
  PUSH(R0);
  INCR(R2);
  JUMP(MAKE_VECTOR_ZERO_LOOP);

MAKE_VECTOR_VARS:
 //R1 holds the num
 MOV(R1, FPARG(2)); 
 CMP(INDD(R1, 0),IMM(T_INTEGER));  
 JUMP_NE(Lerror_incorr_type);
 MOV(R1,INDD(R1, 1));
 MOV(R2,IMM(0));
MAKE_VECTOR_VARS_LOOP:
  CMP(R2,R1);
  JUMP_EQ(MAKE_VECTOR_END);
  PUSH(FPARG(3));
  INCR(R2);
  JUMP(MAKE_VECTOR_VARS_LOOP);

MAKE_VECTOR_END:
  PUSH(R2);
  CALL(MAKE_SOB_VECTOR);
  DROP(1);  
  DROP(R2);
 POP(R2); 
 POP(R1);   
 POP(FP);     
 RETURN; 

VECTOR:
 PUSH(FP);
 MOV(FP,SP);
 PUSH(R1);
 PUSH(R2);
 PUSH(R3);
 //R1 holds the vector
 MOV(R1, FPARG(1)); 
 CMP(R1,IMM(0));
 JUMP_EQ(EMPTY_VECTOR);
 MOV(R2,0);

VECTOR_LOOP:
 MOV(R3, 2);
 CMP(R2,R1);
 JUMP_EQ(NON_EMPTY_VECTOR);
 ADD(R3,R2);
 PUSH(FPARG(R3));
 INCR(R2);
 JUMP(VECTOR_LOOP);

NON_EMPTY_VECTOR:
  PUSH(R2);
 CALL(MAKE_SOB_VECTOR);
 DROP(1);
 DROP(R2);
JUMP(VECTOR_END);

 EMPTY_VECTOR:
 PUSH(T_NIL);
 PUSH(IMM(0));
 CALL(MAKE_SOB_VECTOR);
 DROP(2);
 JUMP(VECTOR_END);

VECTOR_END:
 POP(R3);  
 POP(R2);  
 POP(R1);   
 POP(FP);     
 RETURN; 

///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
////////////////////////////  LIST'S SHIT - love this name ///////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////

LIST:
  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  PUSH(R2);
  PUSH(R3);
  PUSH(R4);
  PUSH(R5);
  PUSH(R6);
  MOV(R1, FPARG(1)); 
  MOV(R2, 0); 
  MOV(R3, 2); 
  CMP(0, R1);
  JUMP_NE(LIST_NODES);  
  PUSH(1);
  CALL(MALLOC);
  DROP(1);
  MOV(R0, SOB_NIL);
  JUMP(LIST_END);
LIST_NODES:
  CMP(R1, R2);
  JUMP_EQ(LIST_LAST);
  PUSH(3);
  CALL(MALLOC);
  DROP(1);
  MOV(R5, R0);
  MOV(INDD(R5, 0), T_PAIR);
  MOV(INDD(R5, 1), FPARG(R3));
  CMP(R2, 0);
  JUMP_EQ(FIRST_TIME);
  MOV(INDD(R6, 2), R5);
  JUMP(LIST_CONTINUE);
FIRST_TIME:
  MOV(R4, R5);
LIST_CONTINUE:
  MOV(R6, R5);
  ADD(R2, 1);
  ADD(R3, 1);
  JUMP(LIST_NODES);
LIST_LAST:
  MOV(INDD(R6, 2), SOB_NIL);
  MOV(R0, R4);
LIST_END:
  POP(R6);
  POP(R5);
  POP(R4);
  POP(R3);
  POP(R2);
  POP(R1);
  JUMP(END);


CONS:
  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  PUSH(R2);
  MOV(R1, FPARG(2)); 
  MOV(R2, FPARG(3)); 
  PUSH(R2); 
  PUSH(R1);
  CALL(MAKE_SOB_PAIR);
  DROP(2);
  POP(R2);
  POP(R1);
  POP(FP);
  RETURN;

CAR:
 LcarBody:  
 PUSH(FP);
 MOV(FP,SP);
 PUSH(R1);
 CMP(FPARG(1),IMM(1));
 JUMP_NE(Lerror_incorr_num_of_args);
 MOV(R1, FPARG(2)); 
 CMP(INDD(R1, 0),IMM(T_PAIR));  
 JUMP_NE(Lerror_incorr_type);  
 MOV(R0, INDD(R1, 1));

 POP(R1);   
 POP(FP);     
 RETURN; 
  

CDR:
 PUSH(FP);    
 MOV(FP,SP);
 PUSH(R1);    
 CMP(FPARG(1),IMM(1));    
 JUMP_NE(Lerror_incorr_num_of_args); 
 MOV(R1,FPARG(2));    
 CMP(INDD(R1,0),IMM(T_PAIR));   
 JUMP_NE(Lerror_incorr_type);
 MOV(R0,INDD(R1,2)); 
 CMP(R0,IMM(0));
 JUMP_EQ(CDR_NIL);
 POP(R1); 
 POP(FP);   
 RETURN; 

CDR_NIL:
  MOV(R0,SOB_NIL);
  POP(R1); 
  POP(FP);   
  RETURN; 


SET_CAR:
 PUSH(FP);
 MOV(FP,SP);
 PUSH(R1);
 CMP(FPARG(1),IMM(2));
 JUMP_NE(Lerror_incorr_num_of_args);
 //R1 holds the pair
 MOV(R1, FPARG(2)); 
 CMP(INDD(R1, 0),IMM(T_PAIR));  
 JUMP_NE(Lerror_incorr_type);  
 MOV(INDD(R1, 1), FPARG(3));
 MOV(R0, T_VOID);
 POP(R1);   
 POP(FP);     
 RETURN; 

SET_CDR:
 PUSH(FP);
 MOV(FP,SP);
 PUSH(R1);
 CMP(FPARG(1),IMM(2));
 JUMP_NE(Lerror_incorr_num_of_args);
 //R1 holds the pair
 MOV(R1, FPARG(2)); 
 CMP(INDD(R1, 0),IMM(T_PAIR));  
 JUMP_NE(Lerror_incorr_type);  
 MOV(INDD(R1, 2), FPARG(3));
 MOV(R0, T_VOID);
 POP(R1);   
 POP(FP);     
 RETURN; 

 LIST_LEN:
 PUSH(FP);
 MOV(FP,SP);
 PUSH(R1);
 PUSH(R2);
 //R1 HOLDS THE COUNTER
 MOV(R1, IMM(0));
 //R2 HOLDS THE LST
 MOV(R2, FPARG(0));
 LST_LOOP:
 CMP(INDD(R2, 0), T_NIL);
 JUMP_EQ(LST_END_OF_LOOP);
 ADD(R1, 1);
 MOV(R2, INDD(R2, 2));
 JUMP(LST_LOOP);

 LST_END_OF_LOOP:
 MOV(R0, R1);

 POP(R2);   
 POP(R1);   
 POP(FP);     
 RETURN;


Lerror_incorr_num_of_args:
  HALT;

Lerror_incorr_type:
  HALT;
 

 ///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
////////////////////////////  NOT  ///////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
  
  NOT:
  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  MOV(R1, FPARG(2));
  CMP(INDD(R1, 0), T_BOOL);
  JUMP_NE(RETURN_FALSE);
  CMP(R1, IMM(FALSE));
  JUMP_EQ(RETURN_TRUE);

RETURN_FALSE:
  MOV(R0,IMM(FALSE));
  JUMP(NOT_END);

  RETURN_TRUE:
  MOV(R0,IMM(TRUE));

  NOT_END:
  POP(R1);
  POP(FP);
  RETURN;


///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
////////////////////////////  IS_?  ///////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////

  IS_BOOLEAN:
  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  MOV(R1, FPARG(2));
  CMP(INDD(R1, 0), T_BOOL);
  JUMP(CHECK_ANS);

  OURS_IS_ZERO:
  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  MOV(R1, FPARG(2));
  CMP(INDD(R1, 1), IMM(0));
  JUMP(CHECK_ANS);

  IS_CHAR:
  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  MOV(R1, FPARG(2));
  CMP(INDD(R1, 0), T_CHAR);
  JUMP(CHECK_ANS);

  IS_INT:
  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  MOV(R1, FPARG(2));
  CMP(INDD(R1, 0), T_INTEGER);
  JUMP(CHECK_ANS);

  IS_NULL:
  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  MOV(R1, FPARG(2));
  CMP(INDD(R1, 0), T_NIL);
  JUMP(CHECK_ANS);

  IS_NUM:
  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  MOV(R1, FPARG(2));
  CMP(INDD(R1, 0), T_INTEGER);
  JUMP_EQ(IS_TRUE);
  CMP(INDD(R1, 0), T_FRAC);
  JUMP_EQ(IS_TRUE);
  MOV(R0, FALSE);
  JUMP(BOOL_END);

  IS_PAIR:
  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  MOV(R1, FPARG(2));
  CMP(INDD(R1, 0), T_PAIR);
  JUMP(CHECK_ANS);

  IS_STRING:
  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  MOV(R1, FPARG(2));
  CMP(INDD(R1, 0), T_STRING);
  JUMP(CHECK_ANS);

  IS_SYMBOL:
  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  MOV(R1, FPARG(2));
  CMP(INDD(R1, 0), T_SYMBOL);
  JUMP(CHECK_ANS);

  IS_VECTOR:
  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  MOV(R1, FPARG(2));
  CMP(INDD(R1, 0), T_VECTOR);
  JUMP(CHECK_ANS);

  IS_PROC:
  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  MOV(R1, FPARG(2));
  CMP(INDD(R1, 0), T_CLOSURE);
  JUMP(CHECK_ANS);

  CHECK_ANS:
  JUMP_EQ(IS_TRUE);
  MOV(R0, FALSE);
  JUMP(BOOL_END);

  IS_TRUE:
  MOV(R0, TRUE);
  JUMP(BOOL_END);
  BOOL_END:
  POP(R1);
  POP(FP);
  RETURN;
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
////////////////////////////  FRACS  ///////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////

  DENOMINATOR:
  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  MOV(R1, FPARG(2));
  CMP(INDD(R1, 0), T_FRAC);
  JUMP_EQ(DENOMINATOR_IS_FRAC);
  PUSH(INDD(R1, 1));
  PUSH(1);
  CALL(MAKE_SOB_FRAC);
  DROP(2);
  MOV(R1, R0);
  DENOMINATOR_IS_FRAC:
  MOV(R0, INDD(R1, 2));
  PUSH(R0);
  CALL(MAKE_SOB_INTEGER);
  DROP(1);
  POP(R1);
  POP(FP);
  RETURN;

  NUMERATOR:
  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  MOV(R1, FPARG(2));
  CMP(INDD(R1, 0), T_FRAC);
  JUMP_EQ(NUMERATOR_IS_FRAC);
  PUSH(INDD(R1, 1));
  PUSH(1);
  CALL(MAKE_SOB_FRAC);
  DROP(2);
  MOV(R1, R0);
  NUMERATOR_IS_FRAC:
  MOV(R0, INDD(R1, 1));
  PUSH(R0);
  CALL(MAKE_SOB_INTEGER);
  DROP(1);
  POP(R1);
  POP(FP);
  RETURN;

///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
////////////////////////////  GREATER  ///////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////

  GREATER:
  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  PUSH(R2);
  PUSH(R3);
  PUSH(R4);
  PUSH(R5);
  PUSH(R6);
  PUSH(R7);

  MOV(R1, TRUE); //R1 HOLDS THE ANSWER
  MOV(R5, FPARG(LOCAL_NUM_ARGS)); //iterate from 2 to 2+ number of args
  ADD(R5, 2);
  MOV(R3, 2);
  MOV(R6, FPARG(R3)); // first scheme arg
  /* CHANGINY THE FIRST ARG TO BE A FRAC */
  CMP(INDD(R6, 0), T_FRAC);
  JUMP_EQ(GREATER_FIRST_ARGUMENT_IS_FRAC);
  MOV(R2, INDD(R6, 1));
  PUSH(R2);
  PUSH(1);
  CALL(MAKE_SOB_FRAC);
  DROP(2);
  MOV(R6, R0);

  GREATER_FIRST_ARGUMENT_IS_FRAC:
  ADD(R3, 1);
  CMP(R5, R3);
  JUMP_EQ(GREATER_ONLY_ONE_ARG);

  GREATER_LOOP:
  CMP(R5, R3);
  JUMP_EQ(GREATER_END);
  MOV(R4, FPARG(R3)); 
  
  CMP(INDD(R4, 0), T_FRAC);// Check if it is a fraction already:
  JUMP_EQ(GREATER_IS_FRAC);
  MOV(R2, INDD(R4, 1)); // It is not, turn it to fraction:
  PUSH(R2);
  PUSH(1);
  CALL(MAKE_SOB_FRAC);
  DROP(2);
  MOV(R4, R0);

  GREATER_IS_FRAC:
  MOV(R2, INDD(R4, 1));
  MUL(R2, IMM(-1));
  PUSH(R2);
  PUSH(INDD(R4, 2));
  CALL(MAKE_SOB_FRAC);
  DROP(2);
  PUSH(R0);
  PUSH(R6);
  CALL(SUM_FRACS);
  DROP(2);
  MOV(R2, R0);
  CMP(INDD(R2, 1), 0);
  JUMP_LE(GREATER_FALSE);
  ADD(R3, 1);
  MOV(R6, R4);
  JUMP(GREATER_LOOP);

  GREATER_ONLY_ONE_ARG:
  JUMP(GREATER_END)

  GREATER_FALSE:
  MOV(R1, FALSE);
  GREATER_END:
  MOV(R0, R1);

  GREATER_RETURN_FRACTION:
  POP(R7);
  POP(R6);
  POP(R5);
  POP(R4);
  POP(R3);
  POP(R2);
  POP(R1);
  POP(FP);
  RETURN;


///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
////////////////////////////  LOWER  ///////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
LOWER:
  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  PUSH(R2);
  PUSH(R3);
  PUSH(R4);
  PUSH(R5);
  PUSH(R6);
  PUSH(R7);

  MOV(R6, IMM(0));
  MOV(R4, IMM(0));
  MOV(R1, TRUE); //R1 HOLDS THE ANSWER
  MOV(R5, FPARG(LOCAL_NUM_ARGS)); //iterate from 2 to 2+ number of args
  ADD(R5, 2);
  MOV(R3, 2);
  MOV(R6, FPARG(R3)); // first scheme arg
  /* CHANGINY THE FIRST ARG TO BE A FRAC */
  CMP(INDD(R6, 0), T_FRAC);
  JUMP_EQ(LOWER_FIRST_ARGUMENT_IS_FRAC);
  MOV(R2, INDD(R6, 1));
  PUSH(R2);
  PUSH(1);
  CALL(MAKE_SOB_FRAC);
  DROP(2);
  MOV(R6, R0);

  LOWER_FIRST_ARGUMENT_IS_FRAC:
  ADD(R3, 1);
  CMP(R5, R3);
  JUMP_EQ(LOWER_ONLY_ONE_ARG);

  LOWER_LOOP:
  CMP(R5, R3);
  JUMP_EQ(LOWER_END);
  MOV(R4, FPARG(R3)); 
  CMP(INDD(R4, 0), T_FRAC);// Check if it is a fraction already:
  JUMP_EQ(LOWER_IS_FRAC);
  MOV(R2, INDD(R4, 1)); // It is not, turn it to fraction:
  PUSH(R2);
  PUSH(1);
  CALL(MAKE_SOB_FRAC);
  DROP(2);
  MOV(R4, R0);

  LOWER_IS_FRAC:
  MOV(R2, INDD(R4, 1));
  MUL(R2, IMM(-1));
  PUSH(R2);
  PUSH(INDD(R4, 2));
  CALL(MAKE_SOB_FRAC);
  DROP(2);
  PUSH(R0);
  PUSH(R6);
  CALL(SUM_FRACS);
  DROP(2);
  MOV(R2, R0);
  CMP(INDD(R2, 1), 0);

  JUMP_GE(LOWER_FALSE);
  ADD(R3, 1);
  MOV(R6, R4);
  JUMP(LOWER_LOOP);

  LOWER_ONLY_ONE_ARG:
  JUMP(LOWER_END)

  LOWER_FALSE:
  MOV(R1, FALSE);
  LOWER_END:
  MOV(R0, R1);

  LOWER_RETURN_FRACTION:
  POP(R7);
  POP(R6);
  POP(R5);
  POP(R4);
  POP(R3);
  POP(R2);
  POP(R1);
  POP(FP);
  RETURN;
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
////////////////////////////  EQUAL  ///////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////

EQUAL:
  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  PUSH(R2);
  PUSH(R3);
  PUSH(R4);
  PUSH(R5);
  PUSH(R6);
  PUSH(R7);

  MOV(R1, TRUE); //R1 HOLDS THE ANSWER
  MOV(R5, FPARG(LOCAL_NUM_ARGS)); //iterate from 2 to 2+ number of args
  ADD(R5, 2);
  MOV(R3, 2);
  MOV(R6, FPARG(R3)); // first scheme arg
  /* CHANGINY THE FIRST ARG TO BE A FRAC */
  CMP(INDD(R6, 0), T_FRAC);
  JUMP_EQ(EQUAL_FIRST_ARGUMENT_IS_FRAC);
  MOV(R2, INDD(R6, 1));
  PUSH(R2);
  PUSH(1);
  CALL(MAKE_SOB_FRAC);
  DROP(2);
  MOV(R6, R0);

  EQUAL_FIRST_ARGUMENT_IS_FRAC:
  ADD(R3, 1);
  CMP(R5, R3);
  JUMP_EQ(EQUAL_ONLY_ONE_ARG);

  EQUAL_LOOP:
  CMP(R5, R3);
  JUMP_EQ(EQUAL_END);
  MOV(R4, FPARG(R3)); 
  
  CMP(INDD(R4, 0), T_FRAC);// Check if it is a fraction already:
  JUMP_EQ(EQUAL_IS_FRAC);
  MOV(R2, INDD(R4, 1)); // It is not, turn it to fraction:
  PUSH(R2);
  PUSH(1);
  CALL(MAKE_SOB_FRAC);
  DROP(2);
  MOV(R4, R0);

  EQUAL_IS_FRAC:
  CMP(INDD(R4, 1), INDD(R6, 1));
  JUMP_NE(EQUAL_FALSE);
  CMP(INDD(R4, 2), INDD(R6, 2));
  JUMP_NE(EQUAL_FALSE);
  ADD(R3, 1);
  JUMP(EQUAL_LOOP);

  EQUAL_ONLY_ONE_ARG:
  JUMP(EQUAL_END)

  EQUAL_FALSE:
  MOV(R1, FALSE);
  EQUAL_END:
  MOV(R0, R1);

  EQUAL_RETURN_FRACTION:
  POP(R7);
  POP(R6);
  POP(R5);
  POP(R4);
  POP(R3);
  POP(R2);
  POP(R1);
  POP(FP);
  RETURN;


///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
////////////////////////////  eq?  ///////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////

CHECK_EQ_OBJECT:
  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  PUSH(R2);
  PUSH(R3);
  PUSH(R4);
  PUSH(R5);
  MOV(R1, FPARG(2));
  MOV(R2, FPARG(3));
  //compare types
  CMP(IND(R1),IND(R2));
  JUMP_NE(EQUAL_NOT_SAME_TYPE);
  CMP(IND(R1),T_SYMBOL);
  JUMP_EQ(CHECK_EQ_SYMBOL);
  CMP(IND(R1),T_INTEGER);
  JUMP_EQ(CHECK_EQ_SINGLE_FIELD);
  CMP(IND(R1),T_FRAC);
  JUMP_EQ(CHECK_EQ_FRAC);
  CMP(IND(R1),T_CHAR);
  JUMP_EQ(CHECK_EQ_SINGLE_FIELD);
  CMP(IND(R1),T_VOID);
  JUMP_EQ(CHECK_EQ_ADDRESS);
  CMP(IND(R1),T_NIL);
  JUMP_EQ(CHECK_EQ_ADDRESS);
  CMP(IND(R1),T_NIL);
  JUMP_EQ(CHECK_EQ_ADDRESS);
  CMP(IND(R1),T_BOOL);
  JUMP_EQ(CHECK_EQ_BOOL);
  CMP(IND(R1),T_STRING);
  JUMP_EQ(CHECK_EQ_BOOL);
  CMP(IND(R1),T_VECTOR);
  JUMP_EQ(CHECK_EQ_BOOL);
  CMP(IND(R1),T_PAIR);
  JUMP_EQ(CHECK_EQ_BOOL);


CHECK_EQ_BOOL:
  CMP(R1,R2);  
  JUMP_NE(EQUAL_NOT_SAME_TYPE);
  MOV(R0,TRUE);
  JUMP(CHECK_EQ_END);


CHECK_EQ_ADDRESS:
  MOV(R0,TRUE);
  JUMP(CHECK_EQ_END);

CHECK_EQ_FRAC:
  CMP(INDD(R1,1),INDD(R2,1));
  JUMP_NE(EQUAL_NOT_SAME_TYPE);
  CMP(INDD(R1,2),INDD(R2,2));
  JUMP_NE(EQUAL_NOT_SAME_TYPE);
  MOV(R0,TRUE);
  JUMP(CHECK_EQ_END);

CHECK_EQ_SYMBOL:
  CMP(INDD(R1,1),INDD(R2,1));
  JUMP_NE(CHECK_EQ_SYMBOL_MORE);
  MOV(R0,TRUE);
  JUMP(CHECK_EQ_END);
CHECK_EQ_SYMBOL_MORE:
  MOV(R1,INDD(R1,1));  
  MOV(R2,INDD(R2,1));
  MOV(R3,INDD(R1,1));  
  MOV(R4,INDD(R2,1));
  CMP(R3,R4);
  JUMP_NE(EQUAL_NOT_SAME_TYPE);
  MOV(R5,IMM(0));
  ADD(R1,IMM(2));
  ADD(R2,IMM(2));
CHECK_EQ_SYMBOL_MORE_LOOP:
  CMP(R5,R4);
  JUMP_EQ(SYMBOL_EQUAL_TRUE);
  CMP(INDD(R1,R5),INDD(R2,R5));
  JUMP_NE(EQUAL_NOT_SAME_TYPE);
  INCR(R5);
  JUMP(CHECK_EQ_SYMBOL_MORE_LOOP);

SYMBOL_EQUAL_TRUE:
  MOV(R0,TRUE);
  JUMP(CHECK_EQ_END);

CHECK_EQ_SINGLE_FIELD:
  CMP(INDD(R1,1),INDD(R2,1));
  JUMP_NE(EQUAL_NOT_SAME_TYPE);
  MOV(R0,TRUE);
  JUMP(CHECK_EQ_END);


EQUAL_NOT_SAME_TYPE:
  MOV(R0,FALSE);
  JUMP(CHECK_EQ_END);

CHECK_EQ_END:
  POP(R5);
  POP(R4);
  POP(R3);
  POP(R2);
  POP(R1);
  POP(FP);
  RETURN;


///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
////////////////////////////  DIVIDE  ///////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////

  DIVIDE:

  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  PUSH(R2);
  PUSH(R3);
  PUSH(R4);
  PUSH(R5);
  PUSH(R6);
  PUSH(R7);


  MOV(R5, FPARG(LOCAL_NUM_ARGS)); //iterate from 2 to 2+ number of args
  ADD(R5, 2);
  MOV(R3, 2);
  MOV(R6, FPARG(R3)); // first scheme arg
  /* CHANGINY THE FIRST ARG TO BE A FRAC */
  CMP(INDD(R6, 0), T_FRAC);
  JUMP_EQ(DIVIDE_FIRST_ARGUMENT_IS_FRAC);
  MOV(R2, INDD(R6, 1));
  PUSH(R2);
  PUSH(1);
  CALL(MAKE_SOB_FRAC);
  DROP(2);
  MOV(R6, R0);

  DIVIDE_FIRST_ARGUMENT_IS_FRAC:
  ADD(R3, 1);
  CMP(R5, R3);
  JUMP_EQ(DIVIDE_ONLY_ONE_ARG);

  /* DIVIDE LOOP*/
  DIVIDE_LOOP:
  CMP(R5, R3);
  JUMP_EQ(DIVIDE_END);
  /* SCHEME ARG */
  MOV(R4, FPARG(R3)); 

  // Check if it is a fraction already:
  CMP(INDD(R4, 0), T_FRAC);
  JUMP_EQ(DIVIDE_IS_FRAC);
  // It is not, turn it to fraction:
  MOV(R2, INDD(R4, 1));
  PUSH(R2);
  PUSH(1);
  CALL(MAKE_SOB_FRAC);
  DROP(2);
  MOV(R4, R0);

  DIVIDE_IS_FRAC:
  /* R4 <- 1/R4 */
  MOV(R2, INDD(R4, 1));
  MOV(INDD(R4,1), INDD(R4,2));
  MOV(INDD(R4,2), R2);
  PUSH(R6);
  PUSH(R4);
  CALL(MUL_FRACS);
  DROP(2);
  MOV(R6, R0);
  ADD(R3, 1);
  JUMP(DIVIDE_LOOP);


  DIVIDE_ONLY_ONE_ARG:

  PUSH(INDD(R6, 2));
  PUSH(INDD(R6, 1));
  CALL(MAKE_SOB_FRAC);
  DROP(2);
  MOV(R6, R0);
  

  DIVIDE_END:
  MOV(R0, R6);
  CMP(INDD(R0, 2), 1); // Somthing / 1
  JUMP_NE(DIVIDE_RETURN_FRACTION);
  PUSH(INDD(R0, 1));
  CALL(MAKE_SOB_INTEGER);
  DROP(1);  


  DIVIDE_RETURN_FRACTION:
  POP(R7);
  POP(R6);
  POP(R5);
  POP(R4);
  POP(R3);
  POP(R2);
  POP(R1);
  POP(FP);
  RETURN;


///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
////////////////////////////  MULTIPLY  ///////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////

  MULTIPLY:

  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  PUSH(R2);
  PUSH(R3);
  PUSH(R4);
  PUSH(R5);
  PUSH(R6);
  PUSH(R7);

  MOV(R1,FPARG(1));
  CMP(R1,IMM(0));
  JUMP_EQ(MULTIPLY_NO_ARGS);

  MOV(R5, FPARG(LOCAL_NUM_ARGS)); //iterate from 2 to 2+ number of args
  ADD(R5, 2);
  MOV(R3, 2);
  MOV(R6, FPARG(R3)); // first scheme arg
  /* CHANGINY THE FIRST ARG TO BE A FRAC */
  CMP(INDD(R6, 0), T_FRAC);
  JUMP_EQ(MULTIPLY_FIRST_ARGUMENT_IS_FRAC);
  MOV(R2, INDD(R6, 1));
  PUSH(R2);
  PUSH(1);
  CALL(MAKE_SOB_FRAC);
  DROP(2);
  MOV(R6, R0);

  MULTIPLY_FIRST_ARGUMENT_IS_FRAC:
  ADD(R3, 1);
  CMP(R5, R3);
  JUMP_EQ(MULTIPLY_ONLY_ONE_ARG);

  /* MUL LOOP*/
  MUL_LOOP:
  CMP(R5, R3);
  JUMP_EQ(MUL_END);
  /* SCHEME ARG */
  MOV(R4, FPARG(R3)); 

  // Check if it is a fraction already:
  CMP(INDD(R4, 0), T_FRAC);
  JUMP_EQ(MUL_IS_FRAC);
  // It is not, turn it to fraction:
  MOV(R2, INDD(R4, 1));
  PUSH(R2);
  PUSH(1);
  CALL(MAKE_SOB_FRAC);
  DROP(2);
  MOV(R4, R0);

  MUL_IS_FRAC:
  PUSH(R6);
  PUSH(R4);
  CALL(MUL_FRACS);
  DROP(2);
  MOV(R6, R0);
  ADD(R3, 1);
  JUMP(MUL_LOOP);

   
  

  MULTIPLY_ONLY_ONE_ARG:
  MOV(R0, R6);
  CMP(INDD(R0, 2), 1); // Somthing / 1
  JUMP_NE(MULTIPLY_RETURN_FRACTION);
  PUSH(INDD(R0, 1));
  CALL(MAKE_SOB_INTEGER);
  DROP(1);
  JUMP(MULTIPLY_RETURN_FRACTION);


MULTIPLY_NO_ARGS: 
  PUSH(IMM(1));
  CALL(MAKE_SOB_INTEGER);
  DROP(1);
  JUMP(MULTIPLY_RETURN_FRACTION);

  MUL_END:
  MOV(R0, R6);
  CMP(INDD(R0, 2), 1); // Somthing / 1
  JUMP_NE(MULTIPLY_RETURN_FRACTION);
  PUSH(INDD(R0, 1));
  CALL(MAKE_SOB_INTEGER);
  DROP(1);  


  MULTIPLY_RETURN_FRACTION:
  POP(R7);
  POP(R6);
  POP(R5);
  POP(R4);
  POP(R3);
  POP(R2);
  POP(R1);
  POP(FP);
  RETURN;



///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
////////////////////////////  MINUS  ///////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////

  MINUS:

  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  PUSH(R2);
  PUSH(R3);
  PUSH(R4);
  PUSH(R5);
  PUSH(R6);
  PUSH(R7);
  

  /* TAKING THE FIRST ARGUMENT OUT FROM THE 'ADD' LOOP*/
  MOV(R5, FPARG(LOCAL_NUM_ARGS)); /*iterate from 2 to 2+ number of args */
  ADD(R5, 2);
  MOV(R3, 2);
  MOV(R6, FPARG(R3)); /* FIRST SCHEME INTEGER */
  CMP(INDD(R6, 0), T_FRAC);
  JUMP_EQ(FIRST_ARGUMENT_IS_FRAC_IN_MINUS);
  // It is not, turn it to fraction:
  MOV(R2, INDD(R6, 1));
  PUSH(R2);
  PUSH(1);
  CALL(MAKE_SOB_FRAC);
  DROP(2);
  MOV(R6, R0);

  FIRST_ARGUMENT_IS_FRAC_IN_MINUS:
  ADD(R3, 1);
  CMP(R5, R3);
  JUMP_EQ(ONLY_ONE_ARG);
  

 /* STARING THE 'ADD' LOOP */

  // Put 0/1 in R1:
  PUSH(0);
  PUSH(1);
  CALL(MAKE_SOB_FRAC);
  DROP(2);
  MOV(R1, R0);

  PLUS_LOOP_IN_MINUS:
  CMP(R5, R3);
  JUMP_EQ(PLUS_END_IN_MINUS);
  // Get arg:
  MOV(R4, FPARG(R3)); /* SCHEME INTEGER */

  // Check if it is a fraction already:
  CMP(INDD(R4, 0), T_FRAC);
  JUMP_EQ(IS_FRAC_IN_MINUS);
  // It is not, turn it to fraction:
  MOV(R2, INDD(R4, 1));
  PUSH(R2);
  PUSH(1);
  CALL(MAKE_SOB_FRAC);
  DROP(2);
  MOV(R4, R0);


  IS_FRAC_IN_MINUS:
  PUSH(R1);
  PUSH(R4);
  CALL(SUM_FRACS);
  DROP(2);
  MOV(R1, R0);
  ADD(R3, 1);
  JUMP(PLUS_LOOP_IN_MINUS);

  PLUS_END_IN_MINUS: // THE SUM IS IN R1
  //MULING THE SUM BY -1
  MOV(R2, INDD(R1, 1));
  MUL(R2, -1);
  PUSH(R2);
  PUSH(INDD(R1, 2));
  CALL(MAKE_SOB_FRAC);
  DROP(2);
  MOV(R1, R0);

  //USING SUM_FRACS TO GET THE ANSWER
  PUSH(R1);
  PUSH(R6);
  CALL(SUM_FRACS);
  DROP(2);

  JUMP(MANY_ARGS);

  ONLY_ONE_ARG:
  //MULING R6 BY -1
  MOV(R2, INDD(R6, 1));
  MUL(R2, -1);
  PUSH(R2);
  PUSH(INDD(R6, 2));
  CALL(MAKE_SOB_FRAC);
  DROP(2);

  MANY_ARGS:
  CMP(INDD(R0, 2), 1); // Somthing / 1
  JUMP_NE(RETURN_FRACTION_IN_MINUS);
  PUSH(INDD(R0, 1));
  CALL(MAKE_SOB_INTEGER);
  DROP(1);  

  RETURN_FRACTION_IN_MINUS:
  POP(R7);
  POP(R6);
  POP(R5);
  POP(R4);
  POP(R3);
  POP(R2);
  POP(R1);
  POP(FP);
  RETURN;


///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
////////////////////////////  PLUS  ///////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////

PLUS:

  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  PUSH(R2);
  PUSH(R3);
  PUSH(R4);
  PUSH(R5);
  PUSH(R6);

  // Put 0/1 in R1:
  PUSH(0);
  PUSH(1);
  CALL(MAKE_SOB_FRAC);
  DROP(2);
  MOV(R1, R0);

  // Start loop stuff:
  MOV(R5, FPARG(LOCAL_NUM_ARGS)); /*iterate from 2 to 2+ number of args */
  ADD(R5, 2);
  MOV(R3, 2); 

PLUS_LOOP:
  CMP(R5, R3);
  
  JUMP_EQ(PLUS_END);
  // Get arg:
  MOV(R4, FPARG(R3)); /* SCHEME INTEGER */

  // Check if it is a fraction already:
  CMP(INDD(R4, 0), T_FRAC);
  JUMP_EQ(IS_FRAC);
  // It is not, turn it to fraction:

  MOV(R2, INDD(R4, 1));
  PUSH(R2);
  PUSH(1);

  CALL(MAKE_SOB_FRAC);
  DROP(2);

  MOV(R4, R0);


  IS_FRAC:


  PUSH(R1);
  PUSH(R4);
  CALL(SUM_FRACS);

  DROP(2);
  MOV(R1, R0);
  ADD(R3, 1);
  JUMP(PLUS_LOOP);

PLUS_END:

MOV(R0, R1);
CMP(INDD(R0, 2), 1); // Somthing / 1
JUMP_NE(RETURN_FRACTION);
PUSH(INDD(R0, 1));
CALL(MAKE_SOB_INTEGER);
DROP(1);  
RETURN_FRACTION:


  POP(R6);
  POP(R5);
  POP(R4);
  POP(R3);
  POP(R2);
  POP(R1);
  POP(FP);
  RETURN;

/* RECEIVES 2 T_FRACS AND RETURN A FRAC*/
  MUL_FRACS:

  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  PUSH(R2);
  PUSH(R3);
  PUSH(R4);
  PUSH(R5);
  PUSH(R6);
  MOV(R1, FPARG(0));
  MOV(R2, FPARG(1));

  MOV(R3, INDD(R1, 1));
  MOV(R4, INDD(R1, 2));
  MOV(R5, INDD(R2, 1));
  MOV(R6, INDD(R2, 2));

  MUL(R5, R3);
  MUL(R6, R4);


  PUSH(R5);
  PUSH(R6);
  CALL(MAKE_SOB_FRAC);
  DROP(2);

  POP(R6);
  POP(R5);
  POP(R4);
  POP(R3);
  POP(R2);
  POP(R1);
  POP(FP);

  RETURN;

  /* RECEIVES 2 T_FRACS AND RETURN A FRAC*/
  SUM_FRACS: 

  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  PUSH(R2);
  PUSH(R3);
  PUSH(R4);
  PUSH(R5);
  PUSH(R6);
  MOV(R1, FPARG(0));
  MOV(R2, FPARG(1));

  MOV(R3, INDD(R1, 1));
  MOV(R4, INDD(R1, 2));
  MOV(R5, INDD(R2, 1));
  MOV(R6, INDD(R2, 2));

  MUL(R3, R6);
  MUL(R5, R4);
  ADD(R3, R5);
  MUL(R4, R6);

  PUSH(R3);
  PUSH(R4);
  CALL(MAKE_SOB_FRAC);
  DROP(2);

  POP(R6);
  POP(R5);
  POP(R4);
  POP(R3);
  POP(R2);
  POP(R1);
  POP(FP);

  RETURN;

///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
//////////////////  CHAR TO INTEGER & INTEGER TO CHAR  ////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////

CHAR_2_INTEGER:
  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  MOV(R1, FPARG(2));
  PUSH(INDD(R1, 1));
  CALL(MAKE_SOB_INTEGER);
  DROP(1);
  POP(R1);
  POP(FP);
  RETURN;

INTEGER_2_CHAR:
  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  MOV(R1, FPARG(2));
  PUSH(INDD(R1, 1));
  CALL(MAKE_SOB_CHAR);
  DROP(1);
  POP(R1);
  POP(FP);
  RETURN;

///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
////////////////////////////  Symbol->String  ///////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////

//receives a symbol, returns a string //

SYMBOL_2_STRING:
  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  MOV(R1, FPARG(2));
  INCR(R1);
  MOV(R1, IND(R1));
  MOV(R0, R1);
  POP(R1);
  POP(FP);

  RETURN;

///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
////////////////////////////  String->Symbol  ///////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////

//receives a symbol, returns a string //

STRING_2_SYMBOL:
  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  PUSH(R2);
  PUSH(R3);
  PUSH(R4);
  MOV(R1, FPARG(2));
  //assuming no symbols//
  CMP(IND(SYMTAB),IMM(0));
  JUMP_EQ(ADD_NEW_SYMB_FIRST);
  MOV(R2,SYMTAB); 
  ///symtable is empty//
  CMP(IND(R2),IMM(0));
  JUMP_EQ(ADD_NEW_SYMB);
LOOP_SYMTAB:
  //r3 will hold symb address, r4 will hold the string address//
  MOV(R3, R2);
  MOV(R4, INDD(IND(R3),1));
  CMP(R4,R1);
  JUMP_EQ(FOUND_SAME_SYMB);
  INCR(R2);
  CMP(IND(R2),IMM(0));
  JUMP_EQ(ADD_NEW_SYMB);
  MOV(R2, IND(R2));
  JUMP(LOOP_SYMTAB);

FOUND_SAME_SYMB:
  MOV(R0, IND(R3));
  JUMP(STRING_2_SYMBOL_END);  

//assuming list of symbols is empty///
ADD_NEW_SYMB_FIRST:
  MOV(R0,R1);
  CALL(MAKE_SOB_SYMBOL);
  MOV(R2,SYMTAB);
  MOV(IND(R2), R0);
  INCR(R2);
  MOV(IND(R2), IMM(0));
  MOV(R0,IND(SYMTAB));
  JUMP(STRING_2_SYMBOL_END);

//assuming R2 is end of list///
ADD_NEW_SYMB:
  MOV(R0,R1);
  CALL(MAKE_SOB_SYMBOL);
  MOV(R3, R0);
  PUSH(IMM(2));
  CALL(MALLOC);
  DROP(1);
  DECR(R2);
  //MOV(R3,R2);
  /////////////////////////need to check that really works - since it might override other fileds in heap////////////
  //INCR(R3);
  MOV(IND(R2),R0);
  MOV(INDD(R0,0), R3);
  MOV(INDD(R0,1), IMM(0));
  MOV(R0,R3);
  JUMP(STRING_2_SYMBOL_END);


STRING_2_SYMBOL_END:
  POP(R4);
  POP(R3);
  POP(R2);
  POP(R1);
  POP(FP);

  RETURN;



///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
////////////////////////////  MAKE_SOB_SYMBOL  ///////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///assuming we received a string object///

MAKE_SOB_SYMBOL:
  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  MOV(R1,R0);
  PUSH(IMM(2));
  CALL(MALLOC);
  DROP(IMM(1));
  MOV(INDD(R0,IMM(0)), T_SYMBOL);
  MOV(INDD(R0,IMM(1)), R1);
  POP(R1);
  POP(FP);
  RETURN;




