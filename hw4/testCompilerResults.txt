Chez Scheme Version 9.4.1
Copyright 1984-2016 Cisco Systems, Inc.

> 
> > > > > > > > > > > > > > > > > > > > > > > > > > > > > > [1mComp171 - Compiler Tests[0m
================================
> 
Primitive Functions:
==============================================

1) (begin 'aBc (string->symbol "aBc"))
[1;32m Success! â˜º [0m 


2) (string->symbol "abc")
[1;32m Success! â˜º [0m 


3) (string->symbol "aBc")
[1;32m Success! â˜º [0m 


4) (string->symbol (make-string 1 #\d))
[1;32m Success! â˜º [0m 


5) (begin 'a 'b 'c 'd 'D 'e 'f 'g 'g234 'abc (string->symbol (make-string 1 #\d)))
[1;32m Success! â˜º [0m 


6) (begin 'a 'b 'c 'd 'e 'f 'g 'g234 'abc (string->symbol "abc"))
[1;32m Success! â˜º [0m 


7) (begin 'a 'b 'c 'd 'D 'e 'f 'g 'g234 'abc (string->symbol "D"))
[1;32m Success! â˜º [0m 


8) (begin 'a 'b 'c 'D 'e 'f 'g 'g234 'abc (string->symbol "g"))
[1;32m Success! â˜º [0m 


9) (begin 'a 'b 'c 'D 'e 'f 'g 'g234 'abc (string->symbol "g234"))
[1;32m Success! â˜º [0m 


10) (begin 'a 'b 'c 'D 'e 'f 'g 'g234 'abc (string->symbol "e"))
[1;32m Success! â˜º [0m 


11) (begin 'a 'b 'c 'D 'e 'f 'g 'g234 'abc (string->symbol "f"))
[1;32m Success! â˜º [0m 


12) (begin 'a 'b 'c 'd 'e 'f 'g 'g234 'abc (string->symbol "c"))
[1;32m Success! â˜º [0m 


13) (begin 'a 'b 'c 'D 'e 'f 'g 'g234 'abc (string->symbol "D"))
[1;32m Success! â˜º [0m 


14) (begin 'a 'b 'c 'd 'e 'f 'g 'g234 'abc (string->symbol "a"))
[1;32m Success! â˜º [0m 


15) (begin 'a 'b 'c 'd 'e 'f 'g 'g234 'abc (string->symbol "b"))
[1;32m Success! â˜º [0m 


16) (symbol->string (string->symbol "Hi"))
[1;32m Success! â˜º [0m 


17) (symbol->string (string->symbol "()"))
[1;32m Success! â˜º [0m 


18) (symbol->string 'abcdefghijkl123456)
[1;32m Success! â˜º [0m 


19) (symbol->string 'xyz)
[1;32m Success! â˜º [0m 


20) (let ((x '(a b c)))
	  (set-cdr! x 1)
	  x)
[1;32m Success! â˜º [0m 


21) (symbol->string 'AbC)
[1;32m Success! â˜º [0m 


22) (define x '(a #t #f 1 2 3)) (set-cdr! x "ABC") x
[1;32m Success! â˜º [0m 


23) (define x '(a #t #f 1 2 3)) (set-cdr! (cdr x) "ABC") x
[1;32m Success! â˜º [0m 


24) (let ((x '(a b c)))
      (set-car! x 1)
      x)
[1;32m Success! â˜º [0m 


25) (define x '(a . b)) (set-cdr! x 'c) x
[1;32m Success! â˜º [0m 


26) (define x '(a . b)) (set-car! x 1) x
[1;32m Success! â˜º [0m 


27) (let ((x (cons #\a 2)))
	      (set-car! x -1/2)
	      (set-car! x #f)
	      x)
[1;32m Success! â˜º [0m 


28) (let ((v (vector 'a 'b 'c 'd 'e)))
      (vector-set! v 2 'x)
      v)
[1;32m Success! â˜º [0m 


29) (define x '(a b)) (set-car! x 1) x
[1;32m Success! â˜º [0m 


30) (define x '#(1 2 3 4 a)) (vector-set! x 4 '#("Akuna Matata")) x
[1;32m Success! â˜º [0m 


31) (let ((x (make-vector 3 'a)))
	    (vector-set! x 0 1)
	    (vector-set! x 1 -3/4)
	    (vector-set! x 1 '(-5/6 12/36))
	    (vector-set! x 2 -3/4)
	    x)
[1;32m Success! â˜º [0m 


32) (define x '#(1 2 3 4 a)) (vector-set! x 2 #\2) x
[1;32m Success! â˜º [0m 


33) (define x '#(1 2 3 4 a)) (vector-set! x 3 '(1)) x
[1;32m Success! â˜º [0m 


34) (define x '#(1 2 3 4 a)) (vector-set! x 0 "String") x
[1;32m Success! â˜º [0m 


35) (define x '#(1 2 3 4 a)) (vector-set! x 1 #t) x
[1;32m Success! â˜º [0m 


36) (let ((x "A1bC2345cdefGh"))
	      (string-set! x 0 #\Z)
	      (string-set! x 5 #\m)
	      (string-set! x 10 #\2)
	      x)
[1;32m Success! â˜º [0m 


37) (let ((str "hi three"))
		(string-set! str 5 #\e)
		(string-set! str 6 #\r)
		str)
[1;32m Success! â˜º [0m 


38) (define x "ABC") (string-set! x 1 #\e) x
[1;32m Success! â˜º [0m 


39) (define x "ABC") (string-set! x 2 #\1) x
[1;32m Success! â˜º [0m 


40) (string-set! "ABC" 0 #\E)
[1;32m Success! â˜º [0m 


41) (define x "ABC") (string-set! x 0 #\E) x
[1;32m Success! â˜º [0m 


42) (remainder 10 -3)
[1;32m Success! â˜º [0m 


43) (remainder -17 -9)
[1;32m Success! â˜º [0m 


44) (remainder 5 2)
[1;32m Success! â˜º [0m 


45) (remainder -45 7)
[1;32m Success! â˜º [0m 


46) (remainder -4 -10)
[1;32m Success! â˜º [0m 


47) (remainder 16 4)
[1;32m Success! â˜º [0m 


48) (remainder 0 10)
[1;32m Success! â˜º [0m 


49) (remainder -4 10)
[1;32m Success! â˜º [0m 


50) (remainder -10 3)
[1;32m Success! â˜º [0m 


51) (remainder -10 -3)
[1;32m Success! â˜º [0m 


52) (remainder 10 2)
[1;32m Success! â˜º [0m 


53) (remainder 10 3)
[1;32m Success! â˜º [0m 


54) (remainder 2 1)
[1;32m Success! â˜º [0m 


55) (remainder 2 10)
[1;32m Success! â˜º [0m 


56) (= 7 7)
[1;32m Success! â˜º [0m 


57) (= 7 9)
[1;32m Success! â˜º [0m 


58) (= -2/4 1/2 -1/2 -1/2)
[1;32m Success! â˜º [0m 


59) (= 1 2 3 4 5 6)
[1;32m Success! â˜º [0m 


60) (= 2/4 1/2 1/2 1/2)
[1;32m Success! â˜º [0m 


61) (= -2/4 -1/2 -1/2 -1/2)
[1;32m Success! â˜º [0m 


62) (= 1 1 1 1 1 1 1 2/2 4/4 1 1)
[1;32m Success! â˜º [0m 


63) (= 1 1 1 1 1 1 1 2/2 -4/4 1 1)
[1;32m Success! â˜º [0m 


64) (< 1/2 2/3 3/4)
[1;32m Success! â˜º [0m 


65) (= 1/2)
[1;32m Success! â˜º [0m 


66) (< -1 -1/2 0 1 3/2 2 5/2 3 7/2 -5 100)
[1;32m Success! â˜º [0m 


67) (< 1 -1/2 0 1 3/2 2 5/2 3 7/2 -5 100)
[1;32m Success! â˜º [0m 


68) (< -5 -4 -3/2 0 1 2 3 4 9/2 10/2 11/2 12/2 13/2 12)
[1;32m Success! â˜º [0m 


69) (< -5 -4 -3/2 0 1 2 3 4 9/2 10/2 11/2 12/2 13/2 -1/2 12)
[1;32m Success! â˜º [0m 


70) (< 3/4 1/2)
[1;32m Success! â˜º [0m 


71) (< -1 -1/2 0 1 3/2 2 5/2 3 7/2 4 100)
[1;32m Success! â˜º [0m 


72) (< -1 -1/2 -2)
[1;32m Success! â˜º [0m 


73) (< 1/2 3/4)
[1;32m Success! â˜º [0m 


74) (< 1 -1/2)
[1;32m Success! â˜º [0m 


75) (< -1 -1/2)
[1;32m Success! â˜º [0m 


76) (> 1 2 2 3 3 4)
[1;32m Success! â˜º [0m 


77) (< -1/2)
[1;32m Success! â˜º [0m 


78) (> 1 5/4)
[1;32m Success! â˜º [0m 


79) (> 2 5/4)
[1;32m Success! â˜º [0m 


80) (> 3/4 1/2)
[1;32m Success! â˜º [0m 


81) (> 5/4 1)
[1;32m Success! â˜º [0m 


82) (> 5 4 2 3)
[1;32m Success! â˜º [0m 


83) (> 5 4 3 2 5/4 1 1/2 0 -1/2 -1)
[1;32m Success! â˜º [0m 


84) (> 2 -1 -1/2)
[1;32m Success! â˜º [0m 


85) (> 2 -1 1/2)
[1;32m Success! â˜º [0m 


86) (> 2/3)
[1;32m Success! â˜º [0m 


87) (> 2 -1)
[1;32m Success! â˜º [0m 


88) (> 0)
[1;32m Success! â˜º [0m 


89) (> 100)
[1;32m Success! â˜º [0m 


90) (/ 3 4)
[1;32m Success! â˜º [0m 


91) (/ 60 5 4 3 2)
[1;32m Success! â˜º [0m 


92) (/ -17)
[1;32m Success! â˜º [0m 


93) (/ 1/2)
[1;32m Success! â˜º [0m 


94) (/ -1/2 1/4)
[1;32m Success! â˜º [0m 


95) (/ -1/2 -1/4)
[1;32m Success! â˜º [0m 


96) (/ 1/2 1/4)
[1;32m Success! â˜º [0m 


97) (/ 1/2 -1/4)
[1;32m Success! â˜º [0m 


98) (/ -2/3 4/5 1 2 12/13)
[1;32m Success! â˜º [0m 


99) (/ -2/3 4/5 1 2 -12/13)
[1;32m Success! â˜º [0m 


100) (/ -2/4)
[1;32m Success! â˜º [0m 


101) (/ 1 2 3)
[1;32m Success! â˜º [0m 


102) (/ -2)
[1;32m Success! â˜º [0m 


103) (/ -2/3)
[1;32m Success! â˜º [0m 


104) (* 3 (* 4 -11/2))
[1;32m Success! â˜º [0m 


105) (/ 2)
[1;32m Success! â˜º [0m 


106) (* 3 4 11/2)
[1;32m Success! â˜º [0m 


107) (* 3 (* 4 11/2))
[1;32m Success! â˜º [0m 


108) (* 3/4)
[1;32m Success! â˜º [0m 


109) (* 1 1/2)
[1;32m Success! â˜º [0m 


110) (* -2/3 5/6 1 2 3)
[1;32m Success! â˜º [0m 


111) (* -2/3 5/6 1 2 3 0)
[1;32m Success! â˜º [0m 


112) (*)
[1;32m Success! â˜º [0m 


113) (* -2/3)
[1;32m Success! â˜º [0m 


114) (- 4 3)
[1;32m Success! â˜º [0m 


115) (- 4 3 2 1)
[1;32m Success! â˜º [0m 


116) (- 0 3)
[1;32m Success! â˜º [0m 


117) (- -2/3)
[1;32m Success! â˜º [0m 


118) (- (- 5/6 6/7) (- 7/8 9))
[1;32m Success! â˜º [0m 


119) (- 3)
[1;32m Success! â˜º [0m 


120) (- 5 6 7)
[1;32m Success! â˜º [0m 


121) (- 5/6 6/7 7/8 9)
[1;32m Success! â˜º [0m 


122) (+ 3 4 5)
[1;32m Success! â˜º [0m 


123) (- 5)
[1;32m Success! â˜º [0m 


