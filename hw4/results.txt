Chez Scheme Version 9.4.1
Copyright 1984-2016 Cisco Systems, Inc.

> 
> > > > > > > > > > > > > > > > > > > > > > > > > > > > > > [1mComp171 - Compiler Tests[0m
================================
> 
Primitive Functions:
==============================================

1) (begin 'aBc (string->symbol "aBc"))
[1;32m Success! â˜º [0m 


2) (string->symbol "abc")
[1;32m Success! â˜º [0m 


3) (string->symbol "aBc")
[1;32m Success! â˜º [0m 


4) (string->symbol (make-string 1 #\d))
[1;32m Success! â˜º [0m 


5) (begin 'a 'b 'c 'd 'D 'e 'f 'g 'g234 'abc (string->symbol (make-string 1 #\d)))
[1;32m Success! â˜º [0m 


6) (begin 'a 'b 'c 'd 'e 'f 'g 'g234 'abc (string->symbol "abc"))
[1;32m Success! â˜º [0m 


7) (begin 'a 'b 'c 'd 'D 'e 'f 'g 'g234 'abc (string->symbol "D"))
[1;32m Success! â˜º [0m 


8) (begin 'a 'b 'c 'D 'e 'f 'g 'g234 'abc (string->symbol "g"))
[1;32m Success! â˜º [0m 


9) (begin 'a 'b 'c 'D 'e 'f 'g 'g234 'abc (string->symbol "g234"))
[1;32m Success! â˜º [0m 


10) (begin 'a 'b 'c 'D 'e 'f 'g 'g234 'abc (string->symbol "e"))
[1;32m Success! â˜º [0m 


11) (begin 'a 'b 'c 'D 'e 'f 'g 'g234 'abc (string->symbol "f"))
[1;32m Success! â˜º [0m 


12) (begin 'a 'b 'c 'd 'e 'f 'g 'g234 'abc (string->symbol "c"))
[1;32m Success! â˜º [0m 


13) (begin 'a 'b 'c 'D 'e 'f 'g 'g234 'abc (string->symbol "D"))
[1;32m Success! â˜º [0m 


14) (begin 'a 'b 'c 'd 'e 'f 'g 'g234 'abc (string->symbol "a"))
[1;32m Success! â˜º [0m 


15) (begin 'a 'b 'c 'd 'e 'f 'g 'g234 'abc (string->symbol "b"))
[1;32m Success! â˜º [0m 


16) (symbol->string (string->symbol "Hi"))
[1;32m Success! â˜º [0m 


17) (symbol->string (string->symbol "()"))
[1;32m Success! â˜º [0m 


18) (symbol->string 'abcdefghijkl123456)
[1;32m Success! â˜º [0m 


19) (symbol->string 'xyz)
[1;32m Success! â˜º [0m 


20) (let ((x '(a b c)))
	  (set-cdr! x 1)
	  x)
[1;32m Success! â˜º [0m 


21) (symbol->string 'AbC)
[1;32m Success! â˜º [0m 


22) (define x '(a #t #f 1 2 3)) (set-cdr! x "ABC") x
[1;32m Success! â˜º [0m 


23) (define x '(a #t #f 1 2 3)) (set-cdr! (cdr x) "ABC") x
[1;32m Success! â˜º [0m 


24) (let ((x '(a b c)))
      (set-car! x 1)
      x)
[1;32m Success! â˜º [0m 


25) (define x '(a . b)) (set-cdr! x 'c) x
[1;32m Success! â˜º [0m 


26) (define x '(a . b)) (set-car! x 1) x
[1;32m Success! â˜º [0m 


27) (let ((x (cons #\a 2)))
	      (set-car! x -1/2)
	      (set-car! x #f)
	      x)
[1;32m Success! â˜º [0m 


28) (let ((v (vector 'a 'b 'c 'd 'e)))
      (vector-set! v 2 'x)
      v)
[1;32m Success! â˜º [0m 


29) (define x '(a b)) (set-car! x 1) x
[1;32m Success! â˜º [0m 


30) (define x '#(1 2 3 4 a)) (vector-set! x 4 '#("Akuna Matata")) x
[1;32m Success! â˜º [0m 


31) (let ((x (make-vector 3 'a)))
	    (vector-set! x 0 1)
	    (vector-set! x 1 -3/4)
	    (vector-set! x 1 '(-5/6 12/36))
	    (vector-set! x 2 -3/4)
	    x)
[1;32m Success! â˜º [0m 


32) (define x '#(1 2 3 4 a)) (vector-set! x 2 #\2) x
[1;32m Success! â˜º [0m 


33) (define x '#(1 2 3 4 a)) (vector-set! x 3 '(1)) x
[1;32m Success! â˜º [0m 


34) (define x '#(1 2 3 4 a)) (vector-set! x 0 "String") x
[1;32m Success! â˜º [0m 


35) (define x '#(1 2 3 4 a)) (vector-set! x 1 #t) x
[1;32m Success! â˜º [0m 


36) (let ((x "A1bC2345cdefGh"))
	      (string-set! x 0 #\Z)
	      (string-set! x 5 #\m)
	      (string-set! x 10 #\2)
	      x)
[1;32m Success! â˜º [0m 


37) (let ((str "hi three"))
		(string-set! str 5 #\e)
		(string-set! str 6 #\r)
		str)
[1;32m Success! â˜º [0m 


38) (define x "ABC") (string-set! x 1 #\e) x
[1;32m Success! â˜º [0m 


39) (define x "ABC") (string-set! x 2 #\1) x
[1;32m Success! â˜º [0m 


40) (string-set! "ABC" 0 #\E)
[1;32m Success! â˜º [0m 


41) (define x "ABC") (string-set! x 0 #\E) x
[1;32m Success! â˜º [0m 


42) (remainder 10 -3)
[1;32m Success! â˜º [0m 


43) (remainder -17 -9)
[1;32m Success! â˜º [0m 


